package evaluacion;

import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import javax.media.CannotRealizeException;
import javax.media.Manager;
import javax.media.MediaLocator;
import javax.media.NoPlayerException;
import javax.media.Player;

/**
 * Ventana interna de reproducción de audio.
 *
 * @author German Martinez Maldonado
 */
public class VentInternaReprSoni extends javax.swing.JInternalFrame {

    private Player player;

    /**
     * Obtiene una instancia de reproductor de audio.
     *
     * @param f El archivo de audio que se intenta reproducir.
     * @return Si el archivo se puede reproducir se devuelve un reproductor que
     * reproduzca ese archivo, en caso contrario se devolverá "null".
     */
    public static VentInternaReprSoni getInstance(File f) {
        VentInternaReprSoni ventana = new VentInternaReprSoni(f);

        if (ventana.player == null) {
            return null;
        } else {
            return ventana;
        }
    }

    /**
     * Constructor de la ventana interna de reproducción de audio.
     *
     * @param f El archivo de audio que se intenta reproducir.
     */
    private VentInternaReprSoni(File f) {
        initComponents();

        play(f);
    }

    /**
     * Crea el reproductor de audio (si es posible) e inicia la reproducción.
     *
     * @param f El archivo de audio que se intenta reproducir.
     */
    public void play(File f) {
        try {
            URL url = f.toURI().toURL();

            MediaLocator ml = new MediaLocator(url);
            player = Manager.createRealizedPlayer(ml);

            Component panelControl = player.getControlPanelComponent();
            if (panelControl != null) {
                add(panelControl);
            }

            setTitle(f.getName());

            player.start();
        } catch (IOException ioe) {
            player = null;
            System.err.println("Error: Fallo de entrada/salida relacionado con el archivo de audio a reproducir. " + ioe.getMessage());
        } catch (NoPlayerException npe) {
            player = null;
            System.err.println("Error: No se ha podido encontrar un reproductor para el audio a reproducir. " + npe.getMessage());
        } catch (CannotRealizeException cre) {
            player = null;
            System.err.println("Error: Fallo cuando se intentaba realizar el reproductor de audio. " + cre.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setIconifiable(true);
        setMaximumSize(null);
        setMinimumSize(new java.awt.Dimension(350, 53));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(350, 53));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                VentanaInternaReproduccionSonidoClosing(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Acción correspondiente a cerrar la ventana de reproducción. Cierra el
     * reproductor de audio.
     *
     * @param evt Evento que produce el inicio de la acción (cierre de ventana
     * interna).
     */
    private void VentanaInternaReproduccionSonidoClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_VentanaInternaReproduccionSonidoClosing
        player.close();
    }//GEN-LAST:event_VentanaInternaReproduccionSonidoClosing
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
