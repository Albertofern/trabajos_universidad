package evaluacion;

import utilidad.LienzoImagen;
import formas.GFigura;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.event.ItemEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BandCombineOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioFormat;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import utilidad.ColoresComboBox;
import utilidad.Filtro;
import utilidad.Grabador;
import utilidad.KernelProducer;
import utilidad.LookupTableProducer;

/**
 * Ventana principal de la interfaz de la aplicación.
 *
 * @author German Martinez Maldonado
 * @version 1.0
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    private VentInternaGrab vigUnica;
    private BufferedImage imagenActual;
    private JComboBox opcionesCodificacion;
    private JComboBox opcionesMuestreo;
    private JComboBox opcionesResolucion;
    private JComboBox opcionesNumCanales;
    private JComboBox opcionesFormato;
    private JCheckBox antialiasing;
    private JCheckBox alphaInterpolation;
    private JCheckBox colorRendering;
    private JCheckBox dithering;
    private JCheckBox rendering;
    private JCheckBox strokeNormalization;
    private JRadioButton interBicubica;
    private JRadioButton interBilineal;
    private JRadioButton interVecino;

    /**
     * Constructo de la ventana principal de la interfaz de la aplicación.
     *
     * @see #initComponents() Inicializa los componentes de la ventana principl.
     * @see #inicializaOpcionesRendering() Inicializa los componentes del panel
     * de rendering.
     */
    @SuppressWarnings("unchecked")
    public VentanaPrincipal() {
        initComponents();

        vigUnica = null;
        opcionesCodificacion = new JComboBox(Grabador.valoresCodificacion);
        opcionesMuestreo = new JComboBox(Grabador.valoresMuestreo);
        opcionesResolucion = new JComboBox(Grabador.valoresResolucion);
        opcionesNumCanales = new JComboBox(Grabador.valoresNumCanales);
        opcionesFormato = new JComboBox(Grabador.valoresFormato);

        inicializaOpcionesRendering();

        grupoFormas.setSelected(botonPunto.getModel(), true);
        colorTrFr.setRenderer(new ColoresComboBox());
        colorReFo.setRenderer(new ColoresComboBox());

        LienzoImagen.setHerramienta(LienzoImagen.PUNTO);
        LienzoImagen.setColorTrazoFrente(Color.BLACK);
        LienzoImagen.setColorRellenoFondo(Color.BLACK);
        LienzoImagen.setValorGrosor(1.0f);
        LienzoImagen.setTrazoContinuo(true);
        LienzoImagen.setTipoRelleno(GFigura.SIN_RELLENO);
        LienzoImagen.setEditar(false);

        LienzoImagen.setAntialiasing(false);
        LienzoImagen.setAlphaInterpolation(false);
        LienzoImagen.setColorRendering(false);
        LienzoImagen.setDithering(false);
        LienzoImagen.setRendering(false);
        LienzoImagen.setStrokeNormalization(false);
        LienzoImagen.setImageInterpolation(LienzoImagen.INTER_BICUBICA);

        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoFormas = new javax.swing.ButtonGroup();
        interpolacionImagen = new javax.swing.ButtonGroup();
        panelEscritorio = new javax.swing.JDesktopPane();
        barraEstado = new javax.swing.JLabel();
        panelBarras = new javax.swing.JPanel();
        panelBarrasSuperior = new javax.swing.JPanel();
        panelBarraGeneral = new javax.swing.JPanel();
        barraGeneral = new javax.swing.JToolBar();
        botonNuevo = new javax.swing.JButton();
        botonAbrir = new javax.swing.JButton();
        botonGuardar = new javax.swing.JButton();
        separadorGen1 = new javax.swing.JToolBar.Separator();
        botonGrabar = new javax.swing.JButton();
        separadorGen2 = new javax.swing.JToolBar.Separator();
        botonWebcam = new javax.swing.JButton();
        botonCaptura = new javax.swing.JButton();
        panelBarraOperaciones = new javax.swing.JPanel();
        barraOperaciones = new javax.swing.JToolBar();
        valorBrillo = new javax.swing.JSlider();
        separadorOpe1 = new javax.swing.JToolBar.Separator();
        botonContNorm = new javax.swing.JButton();
        botonContIlum = new javax.swing.JButton();
        botonContOscu = new javax.swing.JButton();
        separadorOpe2 = new javax.swing.JToolBar.Separator();
        valoresFiltro = new javax.swing.JComboBox();
        separadorOpe3 = new javax.swing.JToolBar.Separator();
        botonNegati = new javax.swing.JButton();
        separadorOpe4 = new javax.swing.JToolBar.Separator();
        botonGrises = new javax.swing.JButton();
        separadorOpe5 = new javax.swing.JToolBar.Separator();
        valorRotacion = new javax.swing.JSlider();
        separadorOpe6 = new javax.swing.JToolBar.Separator();
        botonAumEscala = new javax.swing.JButton();
        botonDisEscala = new javax.swing.JButton();
        separadorOpe7 = new javax.swing.JToolBar.Separator();
        botonDeformar = new javax.swing.JButton();
        separadorOpe8 = new javax.swing.JToolBar.Separator();
        botonIluminar = new javax.swing.JButton();
        botonCorrecGamma = new javax.swing.JButton();
        separadorOpe9 = new javax.swing.JToolBar.Separator();
        botonCombBands = new javax.swing.JButton();
        panelBarrasInferior = new javax.swing.JPanel();
        barraDibujo = new javax.swing.JToolBar();
        botonPunto = new javax.swing.JToggleButton();
        botonLinea = new javax.swing.JToggleButton();
        botonRect = new javax.swing.JToggleButton();
        botonElipse = new javax.swing.JToggleButton();
        botonTrazo = new javax.swing.JToggleButton();
        botonRectRedo = new javax.swing.JToggleButton();
        botonArco = new javax.swing.JToggleButton();
        separadorDib1 = new javax.swing.JToolBar.Separator();
        colorTrFr = new javax.swing.JComboBox();
        botonColorTrFr = new javax.swing.JButton();
        colorReFo = new javax.swing.JComboBox();
        botonColorReFo = new javax.swing.JButton();
        valorColorTrFr = new javax.swing.JLabel();
        valorColorReFo = new javax.swing.JLabel();
        separadorDib2 = new javax.swing.JToolBar.Separator();
        valorGrosor = new javax.swing.JSpinner();
        tipoTrazo = new javax.swing.JComboBox();
        separadorDib3 = new javax.swing.JToolBar.Separator();
        tipoRelleno = new javax.swing.JComboBox();
        separadorDib4 = new javax.swing.JToolBar.Separator();
        valorEditar = new javax.swing.JCheckBox();
        separadorDib5 = new javax.swing.JToolBar.Separator();
        botonRendering = new javax.swing.JButton();
        barraMenu = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        opcionNuevo = new javax.swing.JMenuItem();
        opcionAbrir = new javax.swing.JMenuItem();
        opcionGuardar = new javax.swing.JMenuItem();
        opcionSalir = new javax.swing.JMenuItem();
        menuVer = new javax.swing.JMenu();
        verBarraGeneral = new javax.swing.JCheckBoxMenuItem();
        verBarraDibujo = new javax.swing.JCheckBoxMenuItem();
        verBarraOperaciones = new javax.swing.JCheckBoxMenuItem();
        menuAyuda = new javax.swing.JMenu();
        opcionAcercaDe = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PROGRAMA MULTIMEDIA");
        setMinimumSize(new java.awt.Dimension(1270, 700));
        setPreferredSize(new java.awt.Dimension(1270, 700));
        getContentPane().add(panelEscritorio, java.awt.BorderLayout.CENTER);

        barraEstado.setText("Barra de estado");
        barraEstado.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, java.awt.Color.lightGray, null, null));
        barraEstado.setPreferredSize(new java.awt.Dimension(20, 20));
        getContentPane().add(barraEstado, java.awt.BorderLayout.SOUTH);

        panelBarras.setMaximumSize(new java.awt.Dimension(0, 80));
        panelBarras.setMinimumSize(new java.awt.Dimension(0, 80));
        panelBarras.setPreferredSize(new java.awt.Dimension(0, 80));
        panelBarras.setLayout(new java.awt.BorderLayout());

        panelBarrasSuperior.setAlignmentX(0.0F);
        panelBarrasSuperior.setAlignmentY(0.0F);
        panelBarrasSuperior.setMaximumSize(new java.awt.Dimension(1159, 40));
        panelBarrasSuperior.setMinimumSize(new java.awt.Dimension(1159, 40));
        panelBarrasSuperior.setPreferredSize(new java.awt.Dimension(1159, 40));
        panelBarrasSuperior.setLayout(new java.awt.BorderLayout());

        panelBarraGeneral.setMaximumSize(new java.awt.Dimension(274, 40));
        panelBarraGeneral.setMinimumSize(new java.awt.Dimension(274, 40));
        panelBarraGeneral.setPreferredSize(new java.awt.Dimension(274, 40));
        panelBarraGeneral.setLayout(new java.awt.BorderLayout());

        barraGeneral.setRollover(true);
        barraGeneral.setAlignmentX(0.0F);
        barraGeneral.setMaximumSize(new java.awt.Dimension(272, 40));
        barraGeneral.setMinimumSize(new java.awt.Dimension(272, 40));
        barraGeneral.setName("Barra de herramientas general"); // NOI18N
        barraGeneral.setPreferredSize(new java.awt.Dimension(272, 40));

        botonNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Nuevo.png"))); // NOI18N
        botonNuevo.setToolTipText("Permite crear una nueva imagen");
        botonNuevo.setFocusable(false);
        botonNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonNuevo.setMaximumSize(new java.awt.Dimension(40, 40));
        botonNuevo.setMinimumSize(new java.awt.Dimension(40, 40));
        botonNuevo.setPreferredSize(new java.awt.Dimension(40, 40));
        botonNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionBotonNuevo(evt);
            }
        });
        barraGeneral.add(botonNuevo);

        botonAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Abrir.png"))); // NOI18N
        botonAbrir.setToolTipText("Permite seleccionar un fichero de imagen, sonido o vídeo");
        botonAbrir.setFocusable(false);
        botonAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAbrir.setMaximumSize(new java.awt.Dimension(40, 40));
        botonAbrir.setMinimumSize(new java.awt.Dimension(40, 40));
        botonAbrir.setPreferredSize(new java.awt.Dimension(40, 40));
        botonAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionBotonAbrir(evt);
            }
        });
        barraGeneral.add(botonAbrir);

        botonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Guardar.png"))); // NOI18N
        botonGuardar.setToolTipText("Permite guardar la imagen de la ventana que esté seleccionada");
        botonGuardar.setFocusable(false);
        botonGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGuardar.setMaximumSize(new java.awt.Dimension(40, 40));
        botonGuardar.setMinimumSize(new java.awt.Dimension(40, 40));
        botonGuardar.setPreferredSize(new java.awt.Dimension(40, 40));
        botonGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionBotonGuardar(evt);
            }
        });
        barraGeneral.add(botonGuardar);
        barraGeneral.add(separadorGen1);

        botonGrabar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Microfono.png"))); // NOI18N
        botonGrabar.setToolTipText("Permite guardar almacenar en un fichero el sonido captado a través del micrófono");
        botonGrabar.setFocusable(false);
        botonGrabar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGrabar.setMaximumSize(new java.awt.Dimension(40, 40));
        botonGrabar.setMinimumSize(new java.awt.Dimension(40, 40));
        botonGrabar.setPreferredSize(new java.awt.Dimension(40, 40));
        botonGrabar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionBotonGrabar(evt);
            }
        });
        barraGeneral.add(botonGrabar);
        barraGeneral.add(separadorGen2);

        botonWebcam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Webcam.png"))); // NOI18N
        botonWebcam.setToolTipText("Lanza la ventana tipo webcam que mostrará la secuencia que esté captando la webcam");
        botonWebcam.setFocusable(false);
        botonWebcam.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonWebcam.setMaximumSize(new java.awt.Dimension(40, 40));
        botonWebcam.setMinimumSize(new java.awt.Dimension(40, 40));
        botonWebcam.setPreferredSize(new java.awt.Dimension(40, 40));
        botonWebcam.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonWebcam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionBotonWebcam(evt);
            }
        });
        barraGeneral.add(botonWebcam);

        botonCaptura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Capturar.png"))); // NOI18N
        botonCaptura.setToolTipText("Permitirá al usuario captura imágenes de la cámara o del vídeo que se esté reproduciendo");
        botonCaptura.setFocusable(false);
        botonCaptura.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonCaptura.setMaximumSize(new java.awt.Dimension(40, 40));
        botonCaptura.setMinimumSize(new java.awt.Dimension(40, 40));
        botonCaptura.setPreferredSize(new java.awt.Dimension(40, 40));
        botonCaptura.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonCaptura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCapturaActionPerformed(evt);
            }
        });
        barraGeneral.add(botonCaptura);

        panelBarraGeneral.add(barraGeneral, java.awt.BorderLayout.WEST);

        panelBarrasSuperior.add(panelBarraGeneral, java.awt.BorderLayout.WEST);

        panelBarraOperaciones.setMaximumSize(new java.awt.Dimension(885, 40));
        panelBarraOperaciones.setMinimumSize(new java.awt.Dimension(885, 40));
        panelBarraOperaciones.setPreferredSize(new java.awt.Dimension(885, 40));
        panelBarraOperaciones.setLayout(new java.awt.BorderLayout());

        barraOperaciones.setRollover(true);
        barraOperaciones.setAlignmentX(0.0F);
        barraOperaciones.setAlignmentY(50.0F);
        barraOperaciones.setMaximumSize(new java.awt.Dimension(885, 40));
        barraOperaciones.setMinimumSize(new java.awt.Dimension(885, 40));
        barraOperaciones.setName("Barra de operaciones sobre imagenes"); // NOI18N
        barraOperaciones.setPreferredSize(new java.awt.Dimension(885, 40));

        valorBrillo.setMaximum(255);
        valorBrillo.setToolTipText("Modifica el brillo");
        valorBrillo.setValue(0);
        valorBrillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                valorBrilloStateChanged(evt);
            }
        });
        valorBrillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                valorBrilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                valorBrilloFocusLost(evt);
            }
        });
        barraOperaciones.add(valorBrillo);
        barraOperaciones.add(separadorOpe1);

        botonContNorm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        botonContNorm.setToolTipText("Aplica un contraste normal");
        botonContNorm.setFocusable(false);
        botonContNorm.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonContNorm.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonContNorm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContNormActionPerformed(evt);
            }
        });
        barraOperaciones.add(botonContNorm);

        botonContIlum.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        botonContIlum.setToolTipText("Aplica un contraste con iluminacion");
        botonContIlum.setFocusable(false);
        botonContIlum.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonContIlum.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonContIlum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContIlumActionPerformed(evt);
            }
        });
        barraOperaciones.add(botonContIlum);

        botonContOscu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/oscurecer.png"))); // NOI18N
        botonContOscu.setToolTipText("Aplica un contraste con oscurecimiento");
        botonContOscu.setFocusable(false);
        botonContOscu.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonContOscu.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonContOscu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContOscuActionPerformed(evt);
            }
        });
        barraOperaciones.add(botonContOscu);
        barraOperaciones.add(separadorOpe2);

        valoresFiltro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Emborronamiento media", "Emborronamiento binomial", "Enfoque", "Relieve", "Detector de fronteras laplaciano" }));
        valoresFiltro.setToolTipText("Aplica un filtro a la imagen");
        valoresFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valoresFiltroActionPerformed(evt);
            }
        });
        valoresFiltro.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                valoresFiltroFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                valoresFiltroFocusLost(evt);
            }
        });
        barraOperaciones.add(valoresFiltro);
        barraOperaciones.add(separadorOpe3);

        botonNegati.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Negativo.jpg"))); // NOI18N
        botonNegati.setToolTipText("Modo negativo que invierte los colores");
        botonNegati.setFocusable(false);
        botonNegati.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonNegati.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonNegati.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNegatiActionPerformed(evt);
            }
        });
        barraOperaciones.add(botonNegati);
        barraOperaciones.add(separadorOpe4);

        botonGrises.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/EscalaGrises.png"))); // NOI18N
        botonGrises.setToolTipText("Transforma a niveles de grises");
        botonGrises.setFocusable(false);
        botonGrises.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGrises.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGrises.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGrisesActionPerformed(evt);
            }
        });
        barraOperaciones.add(botonGrises);
        barraOperaciones.add(separadorOpe5);

        valorRotacion.setMaximum(360);
        valorRotacion.setMinorTickSpacing(60);
        valorRotacion.setPaintTicks(true);
        valorRotacion.setToolTipText("Giro libre de la imagen");
        valorRotacion.setValue(1);
        valorRotacion.setMinimumSize(new java.awt.Dimension(110, 23));
        valorRotacion.setPreferredSize(new java.awt.Dimension(110, 23));
        valorRotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                valorRotacionStateChanged(evt);
            }
        });
        valorRotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                valorRotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                valorRotacionFocusLost(evt);
            }
        });
        barraOperaciones.add(valorRotacion);
        barraOperaciones.add(separadorOpe6);

        botonAumEscala.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/aumentar.png"))); // NOI18N
        botonAumEscala.setToolTipText("Escalado de aumento");
        botonAumEscala.setFocusable(false);
        botonAumEscala.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAumEscala.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAumEscala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAumEscalaActionPerformed(evt);
            }
        });
        barraOperaciones.add(botonAumEscala);

        botonDisEscala.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disminuir.png"))); // NOI18N
        botonDisEscala.setToolTipText("Escalado de disminucion");
        botonDisEscala.setFocusable(false);
        botonDisEscala.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonDisEscala.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonDisEscala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDisEscalaActionPerformed(evt);
            }
        });
        barraOperaciones.add(botonDisEscala);
        barraOperaciones.add(separadorOpe7);

        botonDeformar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/shear.png"))); // NOI18N
        botonDeformar.setToolTipText("Aplica transformacion shear");
        botonDeformar.setFocusable(false);
        botonDeformar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonDeformar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonDeformar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDeformarActionPerformed(evt);
            }
        });
        barraOperaciones.add(botonDeformar);
        barraOperaciones.add(separadorOpe8);

        botonIluminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminacion.png"))); // NOI18N
        botonIluminar.setToolTipText("Aumenta la iluminacion");
        botonIluminar.setFocusable(false);
        botonIluminar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonIluminar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonIluminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIluminarActionPerformed(evt);
            }
        });
        barraOperaciones.add(botonIluminar);

        botonCorrecGamma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/gamma.png"))); // NOI18N
        botonCorrecGamma.setToolTipText("Aplica correccion gamma");
        botonCorrecGamma.setFocusable(false);
        botonCorrecGamma.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonCorrecGamma.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonCorrecGamma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCorrecGammaActionPerformed(evt);
            }
        });
        barraOperaciones.add(botonCorrecGamma);
        barraOperaciones.add(separadorOpe9);

        botonCombBands.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/bandas.png"))); // NOI18N
        botonCombBands.setToolTipText("Realiza combinacion lineal de las bandas");
        botonCombBands.setFocusable(false);
        botonCombBands.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonCombBands.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonCombBands.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCombBandsActionPerformed(evt);
            }
        });
        barraOperaciones.add(botonCombBands);

        panelBarraOperaciones.add(barraOperaciones, java.awt.BorderLayout.EAST);

        panelBarrasSuperior.add(panelBarraOperaciones, java.awt.BorderLayout.CENTER);

        panelBarras.add(panelBarrasSuperior, java.awt.BorderLayout.NORTH);

        panelBarrasInferior.setMaximumSize(new java.awt.Dimension(1270, 40));
        panelBarrasInferior.setMinimumSize(new java.awt.Dimension(1270, 40));
        panelBarrasInferior.setPreferredSize(new java.awt.Dimension(1270, 40));
        panelBarrasInferior.setLayout(new java.awt.BorderLayout());

        barraDibujo.setRollover(true);
        barraDibujo.setAlignmentX(0.0F);
        barraDibujo.setMaximumSize(new java.awt.Dimension(1260, 40));
        barraDibujo.setMinimumSize(new java.awt.Dimension(1260, 40));
        barraDibujo.setName("Barra de dibujo"); // NOI18N
        barraDibujo.setPreferredSize(new java.awt.Dimension(1260, 40));

        grupoFormas.add(botonPunto);
        botonPunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Punto.png"))); // NOI18N
        botonPunto.setToolTipText("Forma de dibujo \"punto\"");
        botonPunto.setFocusable(false);
        botonPunto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonPunto.setMaximumSize(new java.awt.Dimension(30, 40));
        botonPunto.setMinimumSize(new java.awt.Dimension(30, 40));
        botonPunto.setPreferredSize(new java.awt.Dimension(30, 40));
        botonPunto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonPunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPuntoActionPerformed(evt);
            }
        });
        barraDibujo.add(botonPunto);

        grupoFormas.add(botonLinea);
        botonLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Linea.png"))); // NOI18N
        botonLinea.setToolTipText("Forma de dibujo \"linea recta\"");
        botonLinea.setFocusable(false);
        botonLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonLinea.setMaximumSize(new java.awt.Dimension(30, 40));
        botonLinea.setMinimumSize(new java.awt.Dimension(30, 40));
        botonLinea.setPreferredSize(new java.awt.Dimension(30, 40));
        botonLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLineaActionPerformed(evt);
            }
        });
        barraDibujo.add(botonLinea);

        grupoFormas.add(botonRect);
        botonRect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Rectangulo.png"))); // NOI18N
        botonRect.setToolTipText("Forma de dibujo \"rectangulo\"");
        botonRect.setFocusable(false);
        botonRect.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRect.setMaximumSize(new java.awt.Dimension(30, 40));
        botonRect.setMinimumSize(new java.awt.Dimension(30, 40));
        botonRect.setPreferredSize(new java.awt.Dimension(30, 40));
        botonRect.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRectActionPerformed(evt);
            }
        });
        barraDibujo.add(botonRect);

        grupoFormas.add(botonElipse);
        botonElipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Elipse.png"))); // NOI18N
        botonElipse.setToolTipText("Forma de dibujo \"elipse\"");
        botonElipse.setFocusable(false);
        botonElipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonElipse.setMaximumSize(new java.awt.Dimension(30, 40));
        botonElipse.setMinimumSize(new java.awt.Dimension(30, 40));
        botonElipse.setPreferredSize(new java.awt.Dimension(30, 40));
        botonElipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonElipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonElipseActionPerformed(evt);
            }
        });
        barraDibujo.add(botonElipse);

        grupoFormas.add(botonTrazo);
        botonTrazo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/TrazoLibre.png"))); // NOI18N
        botonTrazo.setToolTipText("Forma de dibujo \"trazo libre\"");
        botonTrazo.setFocusable(false);
        botonTrazo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonTrazo.setMaximumSize(new java.awt.Dimension(30, 40));
        botonTrazo.setMinimumSize(new java.awt.Dimension(30, 40));
        botonTrazo.setPreferredSize(new java.awt.Dimension(30, 40));
        botonTrazo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonTrazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonTrazoActionPerformed(evt);
            }
        });
        barraDibujo.add(botonTrazo);

        grupoFormas.add(botonRectRedo);
        botonRectRedo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/RectRedondeado.png"))); // NOI18N
        botonRectRedo.setToolTipText("Forma de dibujo \"rectangulo redondeado\"");
        botonRectRedo.setFocusable(false);
        botonRectRedo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRectRedo.setMaximumSize(new java.awt.Dimension(30, 40));
        botonRectRedo.setMinimumSize(new java.awt.Dimension(30, 40));
        botonRectRedo.setPreferredSize(new java.awt.Dimension(30, 40));
        botonRectRedo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRectRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRectRedoActionPerformed(evt);
            }
        });
        barraDibujo.add(botonRectRedo);

        grupoFormas.add(botonArco);
        botonArco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Arco.png"))); // NOI18N
        botonArco.setToolTipText("Forma de dibujo \"arco\"");
        botonArco.setFocusable(false);
        botonArco.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonArco.setMaximumSize(new java.awt.Dimension(30, 40));
        botonArco.setMinimumSize(new java.awt.Dimension(30, 40));
        botonArco.setPreferredSize(new java.awt.Dimension(30, 40));
        botonArco.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonArco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonArcoActionPerformed(evt);
            }
        });
        barraDibujo.add(botonArco);
        barraDibujo.add(separadorDib1);

        colorTrFr.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Negro", "Blanco", "Rojo", "Amarillo", "Azul", "Verde" }));
        colorTrFr.setToolTipText("Colores predeterminados del trazo o color frente del degradado.");
        colorTrFr.setFocusable(false);
        colorTrFr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorTrFrActionPerformed(evt);
            }
        });
        barraDibujo.add(colorTrFr);

        botonColorTrFr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Color1.png"))); // NOI18N
        botonColorTrFr.setToolTipText("Selección de color del trazo o color frente del degradado.");
        botonColorTrFr.setFocusable(false);
        botonColorTrFr.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonColorTrFr.setMaximumSize(new java.awt.Dimension(40, 40));
        botonColorTrFr.setMinimumSize(new java.awt.Dimension(40, 40));
        botonColorTrFr.setName(""); // NOI18N
        botonColorTrFr.setPreferredSize(new java.awt.Dimension(40, 40));
        botonColorTrFr.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonColorTrFr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonColorTrFrActionPerformed(evt);
            }
        });
        barraDibujo.add(botonColorTrFr);

        colorReFo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Negro", "Blanco", "Rojo", "Amarillo", "Azul", "Verde" }));
        colorReFo.setToolTipText("Colores predeterminados de relleno liso o color fondo de degradado.");
        colorReFo.setFocusable(false);
        colorReFo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorReFoActionPerformed(evt);
            }
        });
        barraDibujo.add(colorReFo);

        botonColorReFo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Color2.png"))); // NOI18N
        botonColorReFo.setToolTipText("Selección de color de relleno liso o color fondo de degradado.");
        botonColorReFo.setFocusable(false);
        botonColorReFo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonColorReFo.setMaximumSize(new java.awt.Dimension(40, 40));
        botonColorReFo.setMinimumSize(new java.awt.Dimension(40, 40));
        botonColorReFo.setPreferredSize(new java.awt.Dimension(40, 40));
        botonColorReFo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonColorReFo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonColorReFoActionPerformed(evt);
            }
        });
        barraDibujo.add(botonColorReFo);

        valorColorTrFr.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        valorColorTrFr.setText("<html><font color='red'>R:0</font><font color='green'> G:0</font><font color='blue'> B:0</font></html>");
        valorColorTrFr.setToolTipText("Color de trazo de la figura actual.");
        valorColorTrFr.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        valorColorTrFr.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        valorColorTrFr.setMaximumSize(new java.awt.Dimension(120, 30));
        valorColorTrFr.setMinimumSize(new java.awt.Dimension(120, 30));
        valorColorTrFr.setName(""); // NOI18N
        valorColorTrFr.setPreferredSize(new java.awt.Dimension(120, 30));
        barraDibujo.add(valorColorTrFr);

        valorColorReFo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        valorColorReFo.setText("<html><font color='red'>R:0</font><font color='green'> G:0</font><font color='blue'> B:0</font></html>");
        valorColorReFo.setToolTipText("Color de relleno de la figura actual.");
        valorColorReFo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        valorColorReFo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        valorColorReFo.setMaximumSize(new java.awt.Dimension(120, 30));
        valorColorReFo.setMinimumSize(new java.awt.Dimension(120, 30));
        valorColorReFo.setPreferredSize(new java.awt.Dimension(120, 30));
        barraDibujo.add(valorColorReFo);
        barraDibujo.add(separadorDib2);

        valorGrosor.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(1.0f), Float.valueOf(20.0f), Float.valueOf(1.0f)));
        valorGrosor.setToolTipText("Grosor del trazo");
        valorGrosor.setFocusable(false);
        valorGrosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                valorGrosorStateChanged(evt);
            }
        });
        barraDibujo.add(valorGrosor);

        tipoTrazo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Lineas continuas", "Lineas punteadas" }));
        tipoTrazo.setToolTipText("Tipo de trazo de la figura");
        tipoTrazo.setFocusable(false);
        tipoTrazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoTrazoActionPerformed(evt);
            }
        });
        barraDibujo.add(tipoTrazo);
        barraDibujo.add(separadorDib3);

        tipoRelleno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sin relleno", "Relleno liso", "Degradado horizontal", "Degradado vertical", "Degradado radial", "Imagen" }));
        tipoRelleno.setToolTipText("Tipo de relleno de la figura");
        tipoRelleno.setFocusable(false);
        tipoRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoRellenoActionPerformed(evt);
            }
        });
        barraDibujo.add(tipoRelleno);
        barraDibujo.add(separadorDib4);

        valorEditar.setText("Editar");
        valorEditar.setToolTipText("Alterar entre crear nuevas figuras o editar las existentes.");
        valorEditar.setFocusable(false);
        valorEditar.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        valorEditar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                valorEditarStateChanged(evt);
            }
        });
        barraDibujo.add(valorEditar);
        barraDibujo.add(separadorDib5);

        botonRendering.setText("Rendering");
        botonRendering.setToolTipText("Activa mejoras de rendering");
        botonRendering.setFocusable(false);
        botonRendering.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRendering.setMaximumSize(new java.awt.Dimension(70, 40));
        botonRendering.setMinimumSize(new java.awt.Dimension(70, 40));
        botonRendering.setPreferredSize(new java.awt.Dimension(70, 40));
        botonRendering.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRendering.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRenderingActionPerformed(evt);
            }
        });
        barraDibujo.add(botonRendering);

        panelBarrasInferior.add(barraDibujo, java.awt.BorderLayout.CENTER);

        panelBarras.add(panelBarrasInferior, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panelBarras, java.awt.BorderLayout.PAGE_START);

        menuArchivo.setBackground(new java.awt.Color(255, 255, 255));
        menuArchivo.setText("Archivo");
        menuArchivo.setToolTipText("Menu con opciones generales");

        opcionNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        opcionNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Nuevo.png"))); // NOI18N
        opcionNuevo.setText("Nuevo");
        opcionNuevo.setToolTipText("Permite crear una nueva imagen");
        opcionNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionNuevo);

        opcionAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        opcionAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Abrir.png"))); // NOI18N
        opcionAbrir.setText("Abrir");
        opcionAbrir.setToolTipText("Permite seleccionar un fichero de imagen, sonido o vídeo");
        opcionAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionAbrirActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionAbrir);

        opcionGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        opcionGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Guardar.png"))); // NOI18N
        opcionGuardar.setText("Guardar");
        opcionGuardar.setToolTipText("Permite guardar la imagen de la ventana que esté seleccionada");
        opcionGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionGuardar);

        opcionSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        opcionSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Salir.png"))); // NOI18N
        opcionSalir.setText("Salir");
        opcionSalir.setToolTipText("Abandonar el programa");
        opcionSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionSalirActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionSalir);

        barraMenu.add(menuArchivo);

        menuVer.setText("Ver");
        menuVer.setToolTipText("Menu para ocultar o ver las barras de herramientas");

        verBarraGeneral.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        verBarraGeneral.setSelected(true);
        verBarraGeneral.setText("Mostrar barra de herramientas general");
        verBarraGeneral.setToolTipText("Permite ocultar o visualizar la barra de herramientas general");
        verBarraGeneral.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                verBarraGeneralItemStateChanged(evt);
            }
        });
        menuVer.add(verBarraGeneral);

        verBarraDibujo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        verBarraDibujo.setSelected(true);
        verBarraDibujo.setText("Mostrar barra de dibujo");
        verBarraDibujo.setToolTipText("Permite ocultar o visualizar la barra de dibujo");
        verBarraDibujo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                verBarraDibujoItemStateChanged(evt);
            }
        });
        menuVer.add(verBarraDibujo);

        verBarraOperaciones.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        verBarraOperaciones.setSelected(true);
        verBarraOperaciones.setText("Mostrar barra de operaciones sobre imágenes");
        verBarraOperaciones.setToolTipText("Permite ocultar o visualizar la barra de operaciones sobre imágenes");
        verBarraOperaciones.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                verBarraOperacionesItemStateChanged(evt);
            }
        });
        menuVer.add(verBarraOperaciones);

        barraMenu.add(menuVer);

        menuAyuda.setText("Ayuda");
        menuAyuda.setToolTipText("Menu con informacion sobre el programa");

        opcionAcercaDe.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        opcionAcercaDe.setText("Acerca de");
        opcionAcercaDe.setToolTipText("Opción que mostrará el nombre del programa, versión y autor");
        opcionAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionAcercaDeActionPerformed(evt);
            }
        });
        menuAyuda.add(opcionAcercaDe);

        barraMenu.add(menuAyuda);

        setJMenuBar(barraMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Inicializa las opciones que se mostrarán en el panel de opciones de
     * rendering.
     */
    private void inicializaOpcionesRendering() {
        antialiasing = new JCheckBox();
        alphaInterpolation = new JCheckBox();
        colorRendering = new JCheckBox();
        dithering = new JCheckBox();
        rendering = new JCheckBox();
        strokeNormalization = new JCheckBox();
        interBicubica = new JRadioButton();
        interBilineal = new JRadioButton();
        interVecino = new JRadioButton();

        antialiasing.setText("Antialiasing");
        antialiasing.setToolTipText("Reduce el aliasing en los bordes de las figuras");
        if (LienzoImagen.getAntialiasing()) {
            antialiasing.setSelected(true);
        } else {
            antialiasing.setSelected(false);
        }
        antialiasing.setFocusable(false);
        antialiasing.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        antialiasing.addItemListener(new java.awt.event.ItemListener() {
            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                if (evt.getStateChange() == ItemEvent.DESELECTED) {
                    LienzoImagen.setAntialiasing(false);
                } else if (evt.getStateChange() == ItemEvent.SELECTED) {
                    LienzoImagen.setAntialiasing(true);
                }
            }
        });

        alphaInterpolation.setText("Alpha Interpolation Quality");
        alphaInterpolation.setToolTipText("La mezcla de alfa se hará con mayor "
                + "calidad o \na mayor velocidad");
        if (LienzoImagen.getAlphaInterpolation()) {
            alphaInterpolation.setSelected(true);
        } else {
            alphaInterpolation.setSelected(false);
        }
        alphaInterpolation.setFocusable(false);
        alphaInterpolation.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        alphaInterpolation.addItemListener(new java.awt.event.ItemListener() {
            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                if (evt.getStateChange() == ItemEvent.DESELECTED) {
                    LienzoImagen.setAlphaInterpolation(false);
                } else if (evt.getStateChange() == ItemEvent.SELECTED) {
                    LienzoImagen.setAlphaInterpolation(true);
                }
            }
        });

        colorRendering.setText("Color Render Quality");
        colorRendering.setToolTipText("La conversión del color se hará con mayor "
                + "exactitud o \na mayor velocidad");
        if (LienzoImagen.getColorRendering()) {
            colorRendering.setSelected(true);
        } else {
            colorRendering.setSelected(false);
        }
        colorRendering.setFocusable(false);
        colorRendering.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        colorRendering.addItemListener(new java.awt.event.ItemListener() {
            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                if (evt.getStateChange() == ItemEvent.DESELECTED) {
                    LienzoImagen.setColorRendering(false);
                } else if (evt.getStateChange() == ItemEvent.SELECTED) {
                    LienzoImagen.setColorRendering(true);
                }
            }
        });

        dithering.setText("Dithering");
        dithering.setToolTipText("El renderizado de color de un pixel se hará "
                + "con un color lo \nmás cercano posible al seleccionado");
        if (LienzoImagen.getDithering()) {
            dithering.setSelected(true);
        } else {
            dithering.setSelected(false);
        }
        dithering.setFocusable(false);
        dithering.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        dithering.addItemListener(new java.awt.event.ItemListener() {
            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                if (evt.getStateChange() == ItemEvent.DESELECTED) {
                    LienzoImagen.setDithering(false);
                } else if (evt.getStateChange() == ItemEvent.SELECTED) {
                    LienzoImagen.setDithering(true);
                }
            }
        });

        rendering.setText("Rendering Quality");
        rendering.setToolTipText("El renderizado de las imágenes se hará con "
                + "mayor calidad o \na mayor velocidad");
        if (LienzoImagen.getRendering()) {
            rendering.setSelected(true);
        } else {
            rendering.setSelected(false);
        }
        rendering.setFocusable(false);
        rendering.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        rendering.addItemListener(new java.awt.event.ItemListener() {
            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                if (evt.getStateChange() == ItemEvent.DESELECTED) {
                    LienzoImagen.setRendering(false);
                } else if (evt.getStateChange() == ItemEvent.SELECTED) {
                    LienzoImagen.setRendering(true);
                }
            }
        });

        strokeNormalization.setText("Stroke Normalization Control");
        strokeNormalization.setToolTipText("Permitir que la implementación de "
                + "renderizado modifique la \ngeometría de formas renderizadas "
                + "para diversos fines");
        if (LienzoImagen.getStrokeNormalization()) {
            strokeNormalization.setSelected(true);
        } else {
            strokeNormalization.setSelected(false);
        }
        strokeNormalization.setFocusable(false);
        strokeNormalization.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        strokeNormalization.addItemListener(new java.awt.event.ItemListener() {
            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                if (evt.getStateChange() == ItemEvent.DESELECTED) {
                    LienzoImagen.setStrokeNormalization(false);
                } else if (evt.getStateChange() == ItemEvent.SELECTED) {
                    LienzoImagen.setStrokeNormalization(true);
                }
            }
        });

        interpolacionImagen.add(interBicubica);
        interBicubica.setText("Interpolation Bicubic");
        interBicubica.setToolTipText("Realiza una interpolación bicúbica a la imagen");
        interBicubica.setFocusable(false);
        interBicubica.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        interBicubica.addItemListener(new java.awt.event.ItemListener() {
            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                if (evt.getStateChange() == ItemEvent.SELECTED) {
                    LienzoImagen.setImageInterpolation(LienzoImagen.INTER_BICUBICA);
                }
            }
        });

        interpolacionImagen.add(interBilineal);
        interBilineal.setText("Interpolation Bilinear");
        interBilineal.setToolTipText("Realiza una interpolación bilineal a la imagen");
        interBilineal.setFocusable(false);
        interBilineal.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        interBilineal.addItemListener(new java.awt.event.ItemListener() {
            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                if (evt.getStateChange() == ItemEvent.SELECTED) {
                    LienzoImagen.setImageInterpolation(LienzoImagen.INTER_BILINEAL);
                }
            }
        });

        interpolacionImagen.add(interVecino);
        interVecino.setText("Interpolation Nearest Neighbor");
        interVecino.setToolTipText("Realiza una interpolación vecino más cercano a la imagen");
        interVecino.setFocusable(false);
        interVecino.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        interVecino.addItemListener(new java.awt.event.ItemListener() {
            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                if (evt.getStateChange() == ItemEvent.SELECTED) {
                    LienzoImagen.setImageInterpolation(LienzoImagen.INTER_VECINO);
                }
            }
        });

        interpolacionImagen.setSelected(interBicubica.getModel(), true);
    }

    /**
     * Crea una nueva ventana de imagen.
     */
    private void nuevo() {
        int ancho = 0, alto = 0;
        boolean error = false;
        JTextField campoAncho = new JTextField();
        JTextField campoAlto = new JTextField();
        Object[] contenido = {"Introduzca el alto y el ancho de la\nnueva imagen a crear:"
            + " \n\n(El valor mínimo es 400)", "", "\nAncho:", campoAncho, "Alto:", campoAlto};
        Object acciones[] = {"Aceptar", "Volver"};

        do {
            int resp = JOptionPane.showOptionDialog(null, contenido, "Nueva imagen",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, acciones, contenido);

            if ((resp == JOptionPane.NO_OPTION) || (resp == JOptionPane.CLOSED_OPTION)) {
                error = true;
                break;
            } else {
                try {
                    ancho = Integer.parseInt(campoAncho.getText());
                    alto = Integer.parseInt(campoAlto.getText());
                    error = false;
                } catch (NumberFormatException nfe) {
                    System.err.println("Error: Fallo al convertir valor introducido a numérico. "
                            + nfe.getMessage());
                    error = true;
                }
            }

            if ((ancho < 400) || (alto < 400) || (ancho >= this.getWidth())
                    || (alto >= this.getHeight())) {
                error = true;
            }
        } while (error == true);

        if (error == false) {
            VentInternaImag vii = new VentInternaImag(ancho, alto);
            vii.setTitle("Nueva");
            vii.setSize(ancho, alto);
            panelEscritorio.add(vii);
            vii.setVisible(true);
        }
    }

    /**
     * Abre un archivo multimedia (audio, imagen o video) de una ventana interna
     * de su tipo correspondiente.
     */
    private void abrir() {
        JFileChooser dlg = new JFileChooser();

        Filtro filtroAudio = new Filtro(Filtro.ABRIR_AUDIO, null);
        Filtro filtroImagen = new Filtro(Filtro.ABRIR_IMAGEN, null);
        Filtro filtroVideo = new Filtro(Filtro.ABRIR_VIDEO, null);

        dlg.setAcceptAllFileFilterUsed(false);
        dlg.addChoosableFileFilter(filtroAudio);
        dlg.addChoosableFileFilter(filtroImagen);
        dlg.addChoosableFileFilter(filtroVideo);
        dlg.setFileFilter(filtroImagen);

        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            if (((Filtro) dlg.getFileFilter()).getTipoFiltro() == Filtro.ABRIR_AUDIO) {
                try {
                    File f = dlg.getSelectedFile();
                    VentInternaReprSoni virs = VentInternaReprSoni.getInstance(f);
                    panelEscritorio.add(virs);
                    virs.setVisible(true);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error al abrir archivo de audio.");
                    System.err.println("Error: Error al abrir archivo de audio. " + ex.getMessage());
                }
            } else if (((Filtro) dlg.getFileFilter()).getTipoFiltro() == Filtro.ABRIR_IMAGEN) {
                try {
                    File f = dlg.getSelectedFile();
                    BufferedImage img = ImageIO.read(f);
                    VentInternaImag vii = new VentInternaImag(400, 400);
                    vii.getLienzo().setImage(img);
                    vii.setTitle(f.getName());
                    panelEscritorio.add(vii);
                    vii.setVisible(true);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error al abrir archivo de imagen.");
                    System.err.println("Error: Error al abrir archivo de imagen. " + ex.getMessage());
                }
            } else if (((Filtro) dlg.getFileFilter()).getTipoFiltro() == Filtro.ABRIR_VIDEO) {
                try {
                    File f = dlg.getSelectedFile();
                    VentInternaReprVide vird = VentInternaReprVide.getInstance(f);
                    panelEscritorio.add(vird);
                    vird.setVisible(true);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error al abrir archivo de video.");
                    System.err.println("Error: Error al abrir archivo de video. " + ex.getMessage());
                }
            }
        }
    }

    /**
     * Guarda en un archivo el contenido de la ventana de imagen actual.
     */
    private void guardar() {
        JInternalFrame ventanaActual = panelEscritorio.getSelectedFrame();

        if (ventanaActual == null) {
            JOptionPane.showMessageDialog(this, "No hay ninguna ventana abierta.");
        } else {
            if (ventanaActual instanceof VentInternaImag) {
                JFileChooser dlg = new JFileChooser();

                Filtro filtroBMP = new Filtro(Filtro.GUARDAR, "bmp");
                Filtro filtroGIF = new Filtro(Filtro.GUARDAR, "gif");
                Filtro filtroJPEG = new Filtro(Filtro.GUARDAR, "jpeg");
                Filtro filtroPNG = new Filtro(Filtro.GUARDAR, "png");

                dlg.setAcceptAllFileFilterUsed(false);
                dlg.addChoosableFileFilter(filtroBMP);
                dlg.addChoosableFileFilter(filtroGIF);
                dlg.addChoosableFileFilter(filtroJPEG);
                dlg.addChoosableFileFilter(filtroPNG);
                dlg.setFileFilter(filtroPNG);

                int resp = dlg.showSaveDialog(this);

                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = dlg.getSelectedFile();

                        String formato = ((Filtro) dlg.getFileFilter()).getExtension();

                        String fileExtension = Filtro.getFileExtension(f);

                        if (fileExtension == null) {
                            File fich = new File(f.getAbsolutePath() + "." + formato);
                            f = fich;
                        } else if (!fileExtension.equals(formato)) {
                            int tamRuta = f.getAbsolutePath().length() - fileExtension.length();
                            String ruta = f.getAbsolutePath().substring(0, tamRuta) + formato;
                            File fich = new File(ruta);
                            f = fich;
                        }

                        if (f.exists()) {
                            int sobre = JOptionPane.showConfirmDialog(this,
                                    "¿Desea sobreescribir el archivo \""
                                    + dlg.getSelectedFile().getName() + "\"?",
                                    "Sobreescribir archivo",
                                    JOptionPane.YES_NO_OPTION);

                            if (sobre == JOptionPane.YES_OPTION) {
                                ImageIO.write(((VentInternaImag) ventanaActual).getLienzo().getImage(),
                                        formato, f);
                            }
                        } else {
                            ImageIO.write(((VentInternaImag) ventanaActual).getLienzo().getImage(),
                                    formato, f);
                        }
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, "Error al escribir la imagen.");
                        System.err.println("Error: Error al escribir archivo de imagen. "
                                + ex.getMessage());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Solo se puede guardar el contenido de "
                        + "ventanas de imagen.");
            }
        }
    }

    /**
     * Aplica color seleccionado mediante la lista de colores.
     *
     * @param tipoColor Si el color corresponde al trazo/frente o al
     * relleno/fondo.
     * @param seleccion Nombre del color seleccionado.
     */
    private void aplicaColorLista(int tipoColor, String seleccion) {
        Color color = null;
        String valorRojo, valorVerde, valorAzul;

        switch (seleccion) {
            case "Negro":
                color = Color.BLACK;
                break;
            case "Blanco":
                color = Color.WHITE;
                break;
            case "Rojo":
                color = Color.RED;
                break;
            case "Amarillo":
                color = Color.YELLOW;
                break;
            case "Azul":
                color = Color.BLUE;
                break;
            case "Verde":
                color = Color.GREEN;
                break;
        }

        if (color != null) {
            valorRojo = String.valueOf(color.getRed());
            valorVerde = String.valueOf(color.getGreen());
            valorAzul = String.valueOf(color.getBlue());

            if (tipoColor == LienzoImagen.COLOR_TRAZO_FRENTE) {
                LienzoImagen.setColorTrazoFrente(color);
                valorColorTrFr.setText("<html><font color='red'>R:" + valorRojo
                        + "</font><font color='green'> G:" + valorVerde
                        + "</font><font color='blue'> B:" + valorAzul
                        + "</font></html>");
            } else if (tipoColor == LienzoImagen.COLOR_RELLLENO_FONDO) {
                LienzoImagen.setColorRellenoFondo(color);
                valorColorReFo.setText("<html><font color='red'>R:" + valorRojo
                        + "</font><font color='green'> G:" + valorVerde
                        + "</font><font color='blue'> B:" + valorAzul
                        + "</font></html>");
            }

            VentInternaImag viiActual = (VentInternaImag) (panelEscritorio.getSelectedFrame());

            if (viiActual != null) {
                GFigura figuraActual = viiActual.getLienzo().getFigura();

                if (figuraActual != null) {
                    if (tipoColor == LienzoImagen.COLOR_TRAZO_FRENTE) {
                        figuraActual.getPropiedades().setColorTrazoFrente(LienzoImagen.getColorTrazoFrente());
                    } else if (tipoColor == LienzoImagen.COLOR_RELLLENO_FONDO) {
                        figuraActual.getPropiedades().setColorRellenoFondo(LienzoImagen.getColorRellenoFondo());
                    }
                    repaint();
                }
            }
        }
    }

    /**
     * Aplica color seleccionado mediante el diálogo de selección de colores.
     *
     * @param tipoColor Si el color corresponde al trazo/frente o al
     * relleno/fondo.
     */
    private void aplicaColorBoton(int tipoColor) {
        String valorRojo, valorVerde, valorAzul;

        Color color = JColorChooser.showDialog(this, "Seleccione un color para "
                + "el trazo de \nla figura o frente del degradrado", Color.WHITE);

        valorRojo = String.valueOf(color.getRed());
        valorVerde = String.valueOf(color.getGreen());
        valorAzul = String.valueOf(color.getBlue());

        if (tipoColor == LienzoImagen.COLOR_TRAZO_FRENTE) {
            LienzoImagen.setColorTrazoFrente(color);
            valorColorTrFr.setText("<html><font color='red'>R:" + valorRojo
                    + "</font><font color='green'> G:" + valorVerde
                    + "</font><font color='blue'> B:" + valorAzul
                    + "</font></html>");
        } else if (tipoColor == LienzoImagen.COLOR_RELLLENO_FONDO) {
            LienzoImagen.setColorRellenoFondo(color);
            valorColorReFo.setText("<html><font color='red'>R:" + valorRojo
                    + "</font><font color='green'> G:" + valorVerde
                    + "</font><font color='blue'> B:" + valorAzul
                    + "</font></html>");
        }

        VentInternaImag viiActual = (VentInternaImag) (panelEscritorio.getSelectedFrame());

        if (viiActual != null) {
            GFigura figuraActual = viiActual.getLienzo().getFigura();

            if (figuraActual != null) {
                if (tipoColor == LienzoImagen.COLOR_TRAZO_FRENTE) {
                    figuraActual.getPropiedades().setColorTrazoFrente(LienzoImagen.getColorTrazoFrente());
                } else if (tipoColor == LienzoImagen.COLOR_RELLLENO_FONDO) {
                    figuraActual.getPropiedades().setColorRellenoFondo(LienzoImagen.getColorRellenoFondo());
                }
                repaint();
            }
        }
    }

    /**
     * Cambio en la imagen actual cuando un elemento de la barra de operaciones
     * sobre imágenes obtiene el foco.
     */
    private void operacionObtieneFoco() {
        JInternalFrame ventana = panelEscritorio.getSelectedFrame();

        if (ventana != null) {
            if (ventana instanceof VentInternaImag) {
                imagenActual = ((VentInternaImag) ventana).getLienzo().getImage();
            }
        }
    }

    /**
     * Cambio en la imagen actual cuando un elemento de la barra de operaciones
     * sobre imágenes pierde el foco.
     */
    private void operacionPierdeFoco() {
        imagenActual = null;
        repaint();
    }

    /**
     * Comprueba que la imagen recibida es del tipo RGB, convirtiéndola a ese
     * tipo en caso contrario.
     *
     * @param img Imagen a comprobar.
     * @return Imagen con tipo RGB.
     */
    private BufferedImage compruebaFormatoImagen(BufferedImage img) {
        BufferedImage imgSource;
        if (img.getType() != BufferedImage.TYPE_INT_RGB) {
            imgSource = new BufferedImage(img.getWidth(),
                    img.getHeight(), BufferedImage.TYPE_INT_RGB);
            Graphics2D g2d = imgSource.createGraphics();
            g2d.drawImage(img, 0, 0, null);
        } else {
            imgSource = img;
        }

        return imgSource;
    }

    /**
     * Aplica diferentes transformaciones de color a la imagen actual.
     *
     * @param tipoTransformacion Transformación predefinida de color a aplicar.
     */
    private void aplicaTransformacionColor(int tipoTransformacion) {
        VentInternaImag vii = (VentInternaImag) (panelEscritorio.getSelectedFrame());

        if (vii != null) {
            imagenActual = vii.getLienzo().getImage();

            if (imagenActual != null) {
                BufferedImage imgSource = compruebaFormatoImagen(imagenActual);
                LookupTable lt = null;

                switch (tipoTransformacion) {
                    case LookupTableProducer.TYPE_NEGATIVE:
                        lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_NEGATIVE);
                        break;
                    case LookupTableProducer.TYPE_SFUNCION:
                        lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
                        break;
                    case LookupTableProducer.TYPE_LOGARITHM:
                        lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_LOGARITHM);
                        break;
                    case LookupTableProducer.TYPE_POWER:
                        lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);
                        break;
                    case LookupTableProducer.TYPE_ROOT:
                        lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_ROOT);
                        break;
                    case LookupTableProducer.TYPE_GAMMA_CORRECTION:
                        lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_GAMMA_CORRECTION);
                        break;
                }

                if (lt != null) {
                    LookupOp lop = new LookupOp(lt, null);

                    try {
                        BufferedImage imgdest = lop.filter(imgSource, null);
                        vii.getLienzo().setImage(imgdest);
                    } catch (IllegalArgumentException e) {
                        System.err.println("Error: uno de los métodos ha recibido un argumento "
                                + "invalido mientras se aplicaba la transformación de color a la "
                                + "imagen. " + e.getLocalizedMessage());
                    }
                }

                imagenActual = null;
                repaint();
            }
        }
    }

    /**
     * Aplica un escalado al tamaño de la imagen actual.
     *
     * @param escala Valor del escalado a aplicar.
     */
    private void aplicarEscalado(double escala) {
        VentInternaImag vii = (VentInternaImag) (panelEscritorio.getSelectedFrame());

        if (vii != null) {
            imagenActual = vii.getLienzo().getImage();

            if (imagenActual != null) {
                AffineTransform at = AffineTransform.getScaleInstance(escala, escala);
                AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);

                BufferedImage imgdest = atop.filter(imagenActual, null);
                vii.getLienzo().setImage(imgdest);

                imagenActual = null;
                repaint();
            }
        }
    }

    /**
     * Acción correspondiente a la opción "Nuevo" del menú "Archivo".
     *
     * @param evt Evento que produce el inicio de la acción (opción
     * seleccionada).
     * @see #nuevo() Método que ejecuta la acción.
     */
    private void opcionNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionNuevoActionPerformed
        nuevo();
    }//GEN-LAST:event_opcionNuevoActionPerformed

    /**
     * Acción correspondiente a la opción "Abrir" del menú "Archivo".
     *
     * @param evt Evento que produce el inicio de la acción (opción
     * seleccionada).
     * @see #abrir() Método que ejecuta la acción.
     */
    private void opcionAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionAbrirActionPerformed
        abrir();
    }//GEN-LAST:event_opcionAbrirActionPerformed

    /**
     * Acción correspondiente a la opción "Guardar" del menú "Archivo".
     *
     * @param evt Evento que produce el inicio de la acción (opción
     * seleccionada).
     * @see #guardar() Método que ejecuta la acción.
     */
    private void opcionGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionGuardarActionPerformed
        guardar();
    }//GEN-LAST:event_opcionGuardarActionPerformed

    /**
     * Acción correspondiente a la opción "Salir" del menú "Archivo".
     *
     * @param evt Evento que produce el inicio de la acción (opción
     * seleccionada).
     */
    private void opcionSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_opcionSalirActionPerformed

    /**
     * Acción correspondiente a la opción "Mostrar barra de herramientas
     * general" del menú "Ver".
     *
     * @param evt Evento que produce el inicio de la acción (cambio de estado de
     * la opción).
     */
    private void verBarraGeneralItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_verBarraGeneralItemStateChanged
        if (evt.getStateChange() == ItemEvent.DESELECTED) {
            barraGeneral.setVisible(false);
        } else if (evt.getStateChange() == ItemEvent.SELECTED) {
            barraGeneral.setVisible(true);
        }
    }//GEN-LAST:event_verBarraGeneralItemStateChanged

    /**
     * Acción correspondiente a la opción "Mostrar barra de dibujo" del menú
     * "Ver".
     *
     * @param evt Evento que produce el inicio de la acción (cambio de estado de
     * la opción).
     */
    private void verBarraDibujoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_verBarraDibujoItemStateChanged
        if (evt.getStateChange() == ItemEvent.DESELECTED) {
            barraDibujo.setVisible(false);
        } else if (evt.getStateChange() == ItemEvent.SELECTED) {
            barraDibujo.setVisible(true);
        }
    }//GEN-LAST:event_verBarraDibujoItemStateChanged

    /**
     * Acción correspondiente a la opción "Mostrar barra de operaciones sobre
     * imágenes" del menú "Ver".
     *
     * @param evt Evento que produce el inicio de la acción (cambio de estado de
     * la opción).
     */
    private void verBarraOperacionesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_verBarraOperacionesItemStateChanged
        if (evt.getStateChange() == ItemEvent.DESELECTED) {
            barraOperaciones.setVisible(false);
        } else if (evt.getStateChange() == ItemEvent.SELECTED) {
            barraOperaciones.setVisible(true);
        }
    }//GEN-LAST:event_verBarraOperacionesItemStateChanged

    /**
     * Acción correspondiente a la opción "Acerca de" del menú "Ayuda".
     *
     * @param evt Evento que produce el inicio de la acción (opción
     * seleccionada).
     */
	private void opcionAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionAcercaDeActionPerformed
            JOptionPane.showMessageDialog(this,
                    "Programa multimedia \nVersion 1.0 \nDesarrollado por "
                    + "Germán Martínez Maldonado", "Información sobre el programa",
                    JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_opcionAcercaDeActionPerformed

    /**
     * Acción correspondiente a la botón "Nuevo" de la barra de herramientas
     * generales.
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     * @see #nuevo() Método que ejecuta la acción.
     */
    private void accionBotonNuevo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionBotonNuevo
        nuevo();
    }//GEN-LAST:event_accionBotonNuevo

    /**
     * Acción correspondiente a la botón "Abrir" de la barra de herramientas
     * generales.
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     * @see #abrir() Método que ejecuta la acción.
     */
    private void accionBotonAbrir(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionBotonAbrir
        abrir();
    }//GEN-LAST:event_accionBotonAbrir

    /**
     * Acción correspondiente a la botón "Guardar" de la barra de herramientas
     * generales.
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     * @see #guardar() Método que ejecuta la acción.
     */
    private void accionBotonGuardar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionBotonGuardar
        guardar();
    }//GEN-LAST:event_accionBotonGuardar

    /**
     * Acción correspondiente a la botón "Grabar" de la barra de herramientas
     * generales. Captura el sonido desde una línea de audio según los
     * parámetros de digitalización definidos.
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     */
    private void accionBotonGrabar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionBotonGrabar
        boolean error = false;

        AudioFormat.Encoding valorCodificacion = null;
        float valorMuestreo = 0.0f;
        int valorResolucion = 0;
        int valorNumCanales = 0;
        AudioFileFormat.Type valorFormato = null;

        String codificacion, muestreo, resolucion, numCanales, formato;

        Object[] contenido = {"Introduzca los parámetros de digitalización:\n", "",
            "Codificación:", opcionesCodificacion,
            "Frecuencia de muestreo: ", opcionesMuestreo,
            "Bit de resolución:", opcionesResolucion,
            "Número de canales: ", opcionesNumCanales,
            "Formato de archivo:", opcionesFormato};
        Object acciones[] = {"Aceptar", "Volver"};

        VentInternaGrab vig = VentInternaGrab.getInstance();

        if (vigUnica != vig) {
            do {
                int resp = JOptionPane.showOptionDialog(null, contenido, "Nueva grabación",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,
                        acciones, contenido);

                if ((resp == JOptionPane.NO_OPTION) || (resp == JOptionPane.CLOSED_OPTION)) {
                    error = true;
                    break;
                } else {
                    codificacion = opcionesCodificacion.getSelectedItem().toString();
                    muestreo = opcionesMuestreo.getSelectedItem().toString();
                    resolucion = opcionesResolucion.getSelectedItem().toString();
                    numCanales = opcionesNumCanales.getSelectedItem().toString();
                    formato = opcionesFormato.getSelectedItem().toString();

                    switch (codificacion) {
                        case "PCM SIGNED":
                            valorCodificacion = AudioFormat.Encoding.PCM_SIGNED;
                            break;
                        case "PCM UNSIGNED":
                            valorCodificacion = AudioFormat.Encoding.PCM_SIGNED;
                            break;
                    }

                    switch (muestreo) {
                        case "8000":
                            valorMuestreo = 80000.0f;
                            break;
                        case "16000":
                            valorMuestreo = 16000.0f;
                            break;
                        case "24000":
                            valorMuestreo = 24000.0f;
                            break;
                        case "32000":
                            valorMuestreo = 32000.0f;
                            break;
                        case "44100":
                            valorMuestreo = 44100.0f;
                            break;
                        case "96000":
                            valorMuestreo = 96000.0f;
                            break;
                        case "192000":
                            valorMuestreo = 192000.0f;
                            break;
                    }

                    switch (resolucion) {
                        case "8":
                            valorResolucion = 8;
                            break;
                        case "16":
                            valorResolucion = 16;
                            break;
                        case "24":
                            valorResolucion = 24;
                            break;
                    }

                    switch (numCanales) {
                        case "1":
                            valorNumCanales = 1;
                            break;
                        case "2":
                            valorNumCanales = 2;
                            break;
                    }

                    switch (formato) {
                        case "AIFF":
                            valorFormato = AudioFileFormat.Type.AIFF;
                            break;
                        case "WAVE":
                            valorFormato = AudioFileFormat.Type.WAVE;
                            break;
                    }

                    if ((valorCodificacion != null) && (valorMuestreo != 0)
                            && (valorResolucion != 0) && (valorNumCanales != 0)
                            && (valorFormato != null)) {
                        error = false;
                    } else {
                        error = true;
                    }
                }
            } while (error == true);

            if (error == false) {
                vig.getGrabador().setValores(valorCodificacion, valorMuestreo, 
                        valorResolucion, valorNumCanales, valorFormato);
                vigUnica = vig;
                panelEscritorio.add(vig);
                vig.setVisible(true);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se puede abrir más de una "
                    + "ventana de \ngrabación de audio simultáneamente.");
        }
    }//GEN-LAST:event_accionBotonGrabar

    /**
     * Acción correspondiente a la botón "Webcam" de la barra de herramientas
     * generales. Captura la señal de imagen de la webcam en el sistema y la
     * muestra por pantalla.
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     */
    private void accionBotonWebcam(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionBotonWebcam
        VentInternaWebcam vic = VentInternaWebcam.getInstance();

        if (vic != null) {
            panelEscritorio.add(vic);
            vic.setVisible(true);
        }
    }//GEN-LAST:event_accionBotonWebcam

    /**
     * Acción correspondiente a la botón "Webcam" de la barra de herramientas
     * generales. Realiza una captura de la imagen en la ventana de reproducción
     * de video o captura de webcam actual.
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     */
    private void botonCapturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCapturaActionPerformed
        JInternalFrame ventanaActual = panelEscritorio.getSelectedFrame();

        if (ventanaActual != null) {
            if ((ventanaActual instanceof VentInternaReprVide)
                    || (ventanaActual instanceof VentInternaWebcam)) {
                BufferedImage img = null;

                if (ventanaActual instanceof VentInternaReprVide) {
                    img = ((VentInternaReprVide) ventanaActual).getFrame();
                } else {
                    img = ((VentInternaWebcam) ventanaActual).getFrame();
                }

                if (img != null) {
                    VentInternaImag vii = new VentInternaImag(400, 400);
                    vii.getLienzo().setImage(img);
                    vii.setTitle("Captura");
                    panelEscritorio.add(vii);
                    vii.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_botonCapturaActionPerformed

    /**
     * Acción correspondiente a la botón "Punto" de la barra de dibujo. Cambia
     * la figura de dibujo a "punto".
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     */
    private void botonPuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPuntoActionPerformed
        LienzoImagen.setHerramienta(LienzoImagen.PUNTO);
    }//GEN-LAST:event_botonPuntoActionPerformed

    /**
     * Acción correspondiente a la botón "Linea" de la barra de dibujo. Cambia
     * la figura de dibujo a "linea".
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     */
    private void botonLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLineaActionPerformed
        LienzoImagen.setHerramienta(LienzoImagen.LINEA);
    }//GEN-LAST:event_botonLineaActionPerformed

    /**
     * Acción correspondiente a la botón "Rectangulo" de la barra de dibujo.
     * Cambia la figura de dibujo a "rectangulo".
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     */
    private void botonRectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRectActionPerformed
        LienzoImagen.setHerramienta(LienzoImagen.RECTANGULO);
    }//GEN-LAST:event_botonRectActionPerformed

    /**
     * Acción correspondiente a la botón "Elipse" de la barra de dibujo. Cambia
     * la figura de dibujo a "elipse".
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     */
    private void botonElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonElipseActionPerformed
        LienzoImagen.setHerramienta(LienzoImagen.ELIPSE);
    }//GEN-LAST:event_botonElipseActionPerformed

    /**
     * Acción correspondiente a la botón "Trazo libre" de la barra de dibujo.
     * Cambia la figura de dibujo a "trazo libre".
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     */
    private void botonTrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTrazoActionPerformed
        LienzoImagen.setHerramienta(LienzoImagen.TRAZO_LIBRE);
    }//GEN-LAST:event_botonTrazoActionPerformed

    /**
     * Acción correspondiente a la botón "Rectangulo redondeado" de la barra de
     * dibujo. Cambia la figura de dibujo a "rectangulo redondeado".
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     */
    private void botonRectRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRectRedoActionPerformed
        LienzoImagen.setHerramienta(LienzoImagen.RECT_REDONDEADO);
    }//GEN-LAST:event_botonRectRedoActionPerformed

    /**
     * Acción correspondiente a la botón "Arco" de la barra de dibujo. Cambia la
     * figura de dibujo a "arco".
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     */
    private void botonArcoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonArcoActionPerformed
        LienzoImagen.setHerramienta(LienzoImagen.ARCO);
    }//GEN-LAST:event_botonArcoActionPerformed

    /**
     * Acción correspondiente a la lista de colores de trazo/frente de la barra
     * de dibujo. Selecciona un color de la lista.
     *
     * @param evt Evento que produce el inicio de la acción (elemento de la
     * lista seleccionado).
     * @see #aplicaColorLista(int, java.lang.String) Método que aplica el color
     * seleccionado.
     */
    private void colorTrFrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorTrFrActionPerformed
        JComboBox valores = (JComboBox) evt.getSource();
        String seleccion = (String) valores.getSelectedItem();

        aplicaColorLista(LienzoImagen.COLOR_TRAZO_FRENTE, seleccion);
    }//GEN-LAST:event_colorTrFrActionPerformed

    /**
     * Acción correspondiente al botón de selección de color de trazo/frente de
     * la barra de dibujo. Selecciona un color mediante un diálogo de selección
     * de colores.
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     * @see #aplicaColorBoton(int) Método que aplica el color seleccionado.
     */
    private void botonColorTrFrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonColorTrFrActionPerformed
        aplicaColorBoton(LienzoImagen.COLOR_TRAZO_FRENTE);
    }//GEN-LAST:event_botonColorTrFrActionPerformed

    /**
     * Acción correspondiente a la lista de colores de relleno/fondo de la barra
     * de dibujo. Selecciona un color de la lista.
     *
     * @param evt Evento que produce el inicio de la acción (elemento de la
     * lista seleccionado).
     * @see #aplicaColorLista(int, java.lang.String) Método que aplica el color
     * seleccionado.
     */
    private void colorReFoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorReFoActionPerformed
        JComboBox valores = (JComboBox) evt.getSource();
        String seleccion = (String) valores.getSelectedItem();

        aplicaColorLista(LienzoImagen.COLOR_RELLLENO_FONDO, seleccion);
    }//GEN-LAST:event_colorReFoActionPerformed

    /**
     * Acción correspondiente al botón de selección de color de relleno/fondo de
     * la barra de dibujo. Selecciona un color mediante un diálogo de selección
     * de colores.
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     * @see #aplicaColorBoton(int) Método que aplica el color seleccionado.
     */
    private void botonColorReFoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonColorReFoActionPerformed
        aplicaColorBoton(LienzoImagen.COLOR_RELLLENO_FONDO);
    }//GEN-LAST:event_botonColorReFoActionPerformed

    /**
     * Acción correspondiente a la ruleta de selección de grosor del trazo de la
     * barra de dibujo. Establece un nuevo grosor para el trazo de pintado.
     *
     * @param evt Evento que produce el inicio de la acción (cambio de estado de
     * la ruleta).
     */
    private void valorGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_valorGrosorStateChanged
        LienzoImagen.setValorGrosor((float) valorGrosor.getValue());

        VentInternaImag viiActual = (VentInternaImag) (panelEscritorio.getSelectedFrame());

        if (viiActual != null) {
            GFigura figuraActual = viiActual.getLienzo().getFigura();

            if (figuraActual != null) {
                figuraActual.getPropiedades().setGrosorTrazo(LienzoImagen.getValorGrosor());
                repaint();
            }
        }
    }//GEN-LAST:event_valorGrosorStateChanged

    /**
     * Acción correspondiente a la lista continuidad de trazo de la barra de
     * dibujo. Cambia la continuidad del trazado de dibujado de línea continua a
     * línea punteada y viceversa.
     *
     * @param evt Evento que produce el inicio de la acción (elemento de la
     * lista seleccionado).
     */
    private void tipoTrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoTrazoActionPerformed
        JComboBox valores = (JComboBox) evt.getSource();
        String seleccion = (String) valores.getSelectedItem();

        switch (seleccion) {
            case "Lineas continuas":
                LienzoImagen.setTrazoContinuo(true);
                break;
            case "Lineas punteadas":
                LienzoImagen.setTrazoContinuo(false);
                break;
        }

        VentInternaImag viiActual = (VentInternaImag) (panelEscritorio.getSelectedFrame());

        if (viiActual != null) {
            GFigura figuraActual = viiActual.getLienzo().getFigura();

            if (figuraActual != null) {
                figuraActual.getPropiedades().setContinuidadTrazo(LienzoImagen.getTrazoContinuo());
                repaint();
            }
        }
    }//GEN-LAST:event_tipoTrazoActionPerformed

    /**
     * Acción correspondiente a la lista de tipos de relleno de la barra de
     * dibujo. Cambia el tipo de relleno de pintado para las figuras que se
     * dibujen.
     *
     * @param evt Evento que produce el inicio de la acción (elemento de la
     * lista seleccionado).
     */
    private void tipoRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoRellenoActionPerformed
        JComboBox valores = (JComboBox) evt.getSource();
        String seleccion = (String) valores.getSelectedItem();

        switch (seleccion) {
            case "Sin relleno":
                LienzoImagen.setTipoRelleno(GFigura.SIN_RELLENO);
                break;
            case "Relleno liso":
                LienzoImagen.setTipoRelleno(GFigura.RELLENO_LISO);
                break;
            case "Degradado horizontal":
                LienzoImagen.setTipoRelleno(GFigura.DEGRADADO_HORIZONTAL);
                break;
            case "Degradado vertical":
                LienzoImagen.setTipoRelleno(GFigura.DEGRADADO_VERTICAL);
                break;
            case "Degradado radial":
                LienzoImagen.setTipoRelleno(GFigura.DEGRADADO_RADIAL);
                break;
            case "Imagen":
                LienzoImagen.setTipoRelleno(GFigura.IMAGEN);
                break;
        }
    }//GEN-LAST:event_tipoRellenoActionPerformed

    /**
     * Acción correspondiente a la casilla "Editar" de la barra de dibujo.
     * Establece si se pueden pintar nuevas figuras o editar las existentes.
     *
     * @param evt Evento que produce el inicio de la acción (cambio de estado de
     * la casilla).
     */
    private void valorEditarStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_valorEditarStateChanged
        if (evt.getStateChange() == ItemEvent.DESELECTED) {
            LienzoImagen.setEditar(false);
        } else if (evt.getStateChange() == ItemEvent.SELECTED) {
            LienzoImagen.setEditar(true);
        }
    }//GEN-LAST:event_valorEditarStateChanged

    /**
     * Acción correspondiente al botón "Rendering" de la barra de dibujo.
     * Selecciona las opciones de rendering a aplicar en el pintado de las
     * imagenes.
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     */
    private void botonRenderingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRenderingActionPerformed
        Object[] contenido = {"Seleccione las opciones de rendering a activar:",
            " ", antialiasing, alphaInterpolation, colorRendering, dithering,
            rendering, strokeNormalization, " ", "Imagen Interpolation",
            interBicubica, interBilineal, interVecino};
        Object acciones[] = {"Volver"};

        JOptionPane.showOptionDialog(null, contenido, "Mejora de rendering",
                JOptionPane.YES_OPTION, JOptionPane.QUESTION_MESSAGE, null,
                acciones, contenido);

        repaint();
    }//GEN-LAST:event_botonRenderingActionPerformed

    /**
     * Acción correspondiente al deslizador de selección de brillo de la barra
     * de operaciones sobre imágenes. Establece un nuevo valor de brillo para la
     * imagen actual.
     *
     * @param evt Evento que produce el inicio de la acción (cambio de estado
     * del deslizador).
     */
    private void valorBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_valorBrilloStateChanged
        VentInternaImag vii = (VentInternaImag) (panelEscritorio.getSelectedFrame());

        if (vii != null) {
            if (imagenActual != null) {

                BufferedImage imgSource = compruebaFormatoImagen(imagenActual);
                RescaleOp rop = new RescaleOp(1.0f, (float) valorBrillo.getValue(), null);

                try {
                    BufferedImage imgdest = rop.filter(imgSource, null);

                    vii.getLienzo().setImage(imgdest);
                    vii.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println("Erro: uno de los métodos ha recibido un argumento "
                            + "invalido mientras se modificaba el brillo de la imagen. "
                            + e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_valorBrilloStateChanged

    /**
     * Acción correspondiente al botón "Contraste normal" de la barra de
     * operaciones sobre imágenes.
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     * @see #aplicaTransformacionColor(int) Método que aplica el contraste
     * seleccionado.
     */
    private void botonContNormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContNormActionPerformed
        aplicaTransformacionColor(LookupTableProducer.TYPE_SFUNCION);
    }//GEN-LAST:event_botonContNormActionPerformed

    /**
     * Acción correspondiente al botón "Contraste con iluminación" de la barra
     * de operaciones sobre imágenes.
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     * @see #aplicaTransformacionColor(int) Método que aplica el contraste
     * seleccionado.
     */
    private void botonContIlumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContIlumActionPerformed
        aplicaTransformacionColor(LookupTableProducer.TYPE_LOGARITHM);
    }//GEN-LAST:event_botonContIlumActionPerformed

    /**
     * Acción correspondiente al botón "Contraste con oscurecimiento" de la
     * barra de operaciones sobre imágenes.
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     * @see #aplicaTransformacionColor(int) Método que aplica el contraste
     * seleccionado.
     */
    private void botonContOscuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContOscuActionPerformed
        aplicaTransformacionColor(LookupTableProducer.TYPE_POWER);
    }//GEN-LAST:event_botonContOscuActionPerformed

    /**
     * Acción correspondiente a la lista de filtros de la barra de operaciones
     * sobre imágenes. Establece el filtro a ser aplicado sobre la imagen
     * actual.
     *
     * @param evt Evento que produce el inicio de la acción (elemento de la
     * lista seleccionado).
     */
    private void valoresFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valoresFiltroActionPerformed
        VentInternaImag vii = (VentInternaImag) (panelEscritorio.getSelectedFrame());

        if (vii != null) {
            if (imagenActual != null) {

                JComboBox valores = (JComboBox) evt.getSource();
                String seleccion = (String) valores.getSelectedItem();
                Kernel k = null;

                switch (seleccion) {
                    case "Emborronamiento media":
                        k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                        break;
                    case "Emborronamiento binomial":
                        k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                        break;
                    case "Enfoque":
                        k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                        break;
                    case "Relieve":
                        k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                        break;
                    case "Detector de fronteras laplaciano":
                        k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                        break;
                }

                try {
                    if (k != null) {
                        BufferedImage imgSource = compruebaFormatoImagen(imagenActual);

                        ConvolveOp cop = new ConvolveOp(k);
                        BufferedImage imgdest = cop.filter(imgSource, null);
                        vii.getLienzo().setImage(imgdest);
                        vii.getLienzo().repaint();
                    }
                } catch (IllegalArgumentException e) {
                    System.err.println("Error: uno de los métodos ha recibido un argumento "
                            + "invalido mientras se aplicaba un filtro a la imagen. "
                            + e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_valoresFiltroActionPerformed

    /**
     * Acción correspondiente al botón "Negativo" de la barra de operaciones
     * sobre imágenes.
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     * @see #aplicaTransformacionColor(int) Método que aplica la transformación
     * en negativo.
     */
    private void botonNegatiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNegatiActionPerformed
        aplicaTransformacionColor(LookupTableProducer.TYPE_NEGATIVE);
    }//GEN-LAST:event_botonNegatiActionPerformed

    /**
     * Acción correspondiente al botón "Escala de grises" de la barra de
     * operaciones sobre imágenes. Realiza una transformación sobre el espacio
     * de colores de la imagen actual para transformarlos a escala de grises.
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     */
    private void botonGrisesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGrisesActionPerformed
        VentInternaImag vii = (VentInternaImag) (panelEscritorio.getSelectedFrame());

        if (vii != null) {
            imagenActual = vii.getLienzo().getImage();

            if (imagenActual != null) {
                ICC_Profile ip = ICC_Profile.getInstance(ColorSpace.CS_GRAY);
                ColorSpace cs = new ICC_ColorSpace(ip);
                ColorConvertOp ccop = new ColorConvertOp(cs, null);

                BufferedImage imgdest = ccop.filter(imagenActual, null);
                vii.getLienzo().setImage(imgdest);

                imagenActual = null;
                repaint();
            }
        }
    }//GEN-LAST:event_botonGrisesActionPerformed

    /**
     * Acción correspondiente al deslizador de rotación de la barra de
     * operaciones sobre imágenes. Establece la rotación que se aplicará a la
     * imagen actual.
     *
     * @param evt Evento que produce el inicio de la acción (cambio de estado
     * del deslizador).
     */
    private void valorRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_valorRotacionStateChanged
        VentInternaImag vii = (VentInternaImag) (panelEscritorio.getSelectedFrame());

        if (vii != null) {
            if (imagenActual != null) {
                int grados = valorRotacion.getValue();
                int ancho = imagenActual.getWidth();
                int alto = imagenActual.getHeight();

                AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(grados),
                        ancho / 2.0, alto / 2.0);
                AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);

                BufferedImage imgdest = atop.filter(imagenActual, null);
                vii.getLienzo().setImage(imgdest);
                vii.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_valorRotacionStateChanged

    /**
     * Acción correspondiente al botón "Escalado de aumento" de la barra de
     * operaciones sobre imágenes.
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     * @see #aplicarEscalado(double) Método que aplica el escalado seleccionado.
     */
    private void botonAumEscalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAumEscalaActionPerformed
        aplicarEscalado(1.25);
    }//GEN-LAST:event_botonAumEscalaActionPerformed

    /**
     * Acción correspondiente al botón "Escalado de disminución" de la barra de
     * operaciones sobre imágenes.
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     * @see #aplicarEscalado(double) Método que aplica el escalado seleccionado.
     */
    private void botonDisEscalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDisEscalaActionPerformed
        aplicarEscalado(0.75);
    }//GEN-LAST:event_botonDisEscalaActionPerformed

    /**
     * Acción correspondiente al botón "Deformar" de la barra de operaciones
     * sobre imágenes. Aplica una transformación de deformación de la forma a la
     * imagen actual.
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     */
    private void botonDeformarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDeformarActionPerformed
        VentInternaImag vii = (VentInternaImag) (panelEscritorio.getSelectedFrame());

        if (vii != null) {
            imagenActual = vii.getLienzo().getImage();

            if (imagenActual != null) {
                AffineTransform at = AffineTransform.getShearInstance(0.5, 0);
                AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);

                BufferedImage imgdest = atop.filter(imagenActual, null);
                vii.getLienzo().setImage(imgdest);

                imagenActual = null;
                repaint();
            }
        }
    }//GEN-LAST:event_botonDeformarActionPerformed

    /**
     * Acción correspondiente al botón "Iluminar" de la barra de operaciones
     * sobre imágenes.
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     * @see #aplicaTransformacionColor(int) Método que aplica la transformación
     * de iluminación.
     */
    private void botonIluminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIluminarActionPerformed
        aplicaTransformacionColor(LookupTableProducer.TYPE_ROOT);
    }//GEN-LAST:event_botonIluminarActionPerformed

    /**
     * Acción correspondiente al botón "Corrección gamma" de la barra de
     * operaciones sobre imágenes.
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     * @see #aplicaTransformacionColor(int) Método que aplica la transformación
     * de iluminación.
     */
    private void botonCorrecGammaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCorrecGammaActionPerformed
        aplicaTransformacionColor(LookupTableProducer.TYPE_GAMMA_CORRECTION);
    }//GEN-LAST:event_botonCorrecGammaActionPerformed

    /**
     * Acción correspondiente al botón "Combinación de bandas" de la barra de
     * operaciones sobre imágenes. Aplica una combinacion lineal de las bandas
     * de colores de la imagen actual.
     *
     * @param evt Evento que produce el inicio de la acción (botón pulsado).
     */
    private void botonCombBandsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCombBandsActionPerformed
        VentInternaImag vii = (VentInternaImag) (panelEscritorio.getSelectedFrame());

        if (vii != null) {
            imagenActual = vii.getLienzo().getImage();

            if (imagenActual != null) {
                float[][] m = {{1.0F, 0.0F, 0.0F}, {0.0F, 0.0F, 1.0F}, {0.0F, 1.0F, 0.0F}};

                BandCombineOp bcop = new BandCombineOp(m, null);
                WritableRaster rasterdest = bcop.filter(imagenActual.getRaster(), null);

                BufferedImage imgdest = new BufferedImage(imagenActual.getColorModel(),
                        rasterdest, false, null);
                vii.getLienzo().setImage(imgdest);

                imagenActual = null;
                repaint();
            }
        }
    }//GEN-LAST:event_botonCombBandsActionPerformed

    /**
     * Acción correspondiente a obtener el foco en el deslizador que controla el
     * brillo de la imagen.
     *
     * @param evt Evento que produce el inicio de la acción (foco ganado por el
     * elemento).
     * @see #operacionObtieneFoco() Método que ejecuta la acción.
     */
    private void valorBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_valorBrilloFocusGained
        operacionObtieneFoco();
    }//GEN-LAST:event_valorBrilloFocusGained

    /**
     * Acción correspondiente a perder el foco en el deslizador que controla el
     * brillo de la imagen.
     *
     * @param evt Evento que produce el inicio de la acción (foco perdido por el
     * elemento).
     * @see #operacionPierdeFoco() Método que ejecuta la acción.
     */
    private void valorBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_valorBrilloFocusLost
        operacionPierdeFoco();
    }//GEN-LAST:event_valorBrilloFocusLost

    /**
     * Acción correspondiente a obtener el foco en la lista de selección de
     * filtros.
     *
     * @param evt Evento que produce el inicio de la acción (foco ganado por el
     * elemento).
     * @see #operacionObtieneFoco() Método que ejecuta la acción.
     */
    private void valoresFiltroFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_valoresFiltroFocusGained
        operacionObtieneFoco();
    }//GEN-LAST:event_valoresFiltroFocusGained

    /**
     * Acción correspondiente a perder el foco en la lista de selección de
     * filtros.
     *
     * @param evt Evento que produce el inicio de la acción (foco perdido por el
     * elemento).
     * @see #operacionPierdeFoco() Método que ejecuta la acción.
     */
    private void valoresFiltroFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_valoresFiltroFocusLost
        operacionPierdeFoco();
    }//GEN-LAST:event_valoresFiltroFocusLost

    /**
     * Acción correspondiente a obtener el foco en el deslizador que controla la
     * rotación de la imagen.
     *
     * @param evt Evento que produce el inicio de la acción (foco ganado por el
     * elemento).
     * @see #operacionObtieneFoco() Método que ejecuta la acción.
     */
    private void valorRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_valorRotacionFocusGained
        operacionObtieneFoco();
    }//GEN-LAST:event_valorRotacionFocusGained

    /**
     * Acción correspondiente a perder el foco en el deslizador que controla la
     * rotación de la imagen.
     *
     * @param evt Evento que produce el inicio de la acción (foco perdido por el
     * elemento).
     * @see #operacionPierdeFoco() Método que ejecuta la acción.
     */
    private void valorRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_valorRotacionFocusLost
        operacionPierdeFoco();
    }//GEN-LAST:event_valorRotacionFocusLost
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar barraDibujo;
    private javax.swing.JLabel barraEstado;
    private javax.swing.JToolBar barraGeneral;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JToolBar barraOperaciones;
    private javax.swing.JButton botonAbrir;
    private javax.swing.JToggleButton botonArco;
    private javax.swing.JButton botonAumEscala;
    private javax.swing.JButton botonCaptura;
    private javax.swing.JButton botonColorReFo;
    private javax.swing.JButton botonColorTrFr;
    private javax.swing.JButton botonCombBands;
    private javax.swing.JButton botonContIlum;
    private javax.swing.JButton botonContNorm;
    private javax.swing.JButton botonContOscu;
    private javax.swing.JButton botonCorrecGamma;
    private javax.swing.JButton botonDeformar;
    private javax.swing.JButton botonDisEscala;
    private javax.swing.JToggleButton botonElipse;
    private javax.swing.JButton botonGrabar;
    private javax.swing.JButton botonGrises;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JButton botonIluminar;
    private javax.swing.JToggleButton botonLinea;
    private javax.swing.JButton botonNegati;
    private javax.swing.JButton botonNuevo;
    private javax.swing.JToggleButton botonPunto;
    private javax.swing.JToggleButton botonRect;
    private javax.swing.JToggleButton botonRectRedo;
    private javax.swing.JButton botonRendering;
    private javax.swing.JToggleButton botonTrazo;
    private javax.swing.JButton botonWebcam;
    private javax.swing.JComboBox colorReFo;
    private javax.swing.JComboBox colorTrFr;
    private javax.swing.ButtonGroup grupoFormas;
    private javax.swing.ButtonGroup interpolacionImagen;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JMenu menuVer;
    private javax.swing.JMenuItem opcionAbrir;
    private javax.swing.JMenuItem opcionAcercaDe;
    private javax.swing.JMenuItem opcionGuardar;
    private javax.swing.JMenuItem opcionNuevo;
    private javax.swing.JMenuItem opcionSalir;
    private javax.swing.JPanel panelBarraGeneral;
    private javax.swing.JPanel panelBarraOperaciones;
    private javax.swing.JPanel panelBarras;
    private javax.swing.JPanel panelBarrasInferior;
    private javax.swing.JPanel panelBarrasSuperior;
    private javax.swing.JDesktopPane panelEscritorio;
    private javax.swing.JToolBar.Separator separadorDib1;
    private javax.swing.JToolBar.Separator separadorDib2;
    private javax.swing.JToolBar.Separator separadorDib3;
    private javax.swing.JToolBar.Separator separadorDib4;
    private javax.swing.JToolBar.Separator separadorDib5;
    private javax.swing.JToolBar.Separator separadorGen1;
    private javax.swing.JToolBar.Separator separadorGen2;
    private javax.swing.JToolBar.Separator separadorOpe1;
    private javax.swing.JToolBar.Separator separadorOpe2;
    private javax.swing.JToolBar.Separator separadorOpe3;
    private javax.swing.JToolBar.Separator separadorOpe4;
    private javax.swing.JToolBar.Separator separadorOpe5;
    private javax.swing.JToolBar.Separator separadorOpe6;
    private javax.swing.JToolBar.Separator separadorOpe7;
    private javax.swing.JToolBar.Separator separadorOpe8;
    private javax.swing.JToolBar.Separator separadorOpe9;
    private javax.swing.JComboBox tipoRelleno;
    private javax.swing.JComboBox tipoTrazo;
    private javax.swing.JSlider valorBrillo;
    private javax.swing.JLabel valorColorReFo;
    private javax.swing.JLabel valorColorTrFr;
    private javax.swing.JCheckBox valorEditar;
    private javax.swing.JSpinner valorGrosor;
    private javax.swing.JSlider valorRotacion;
    private javax.swing.JComboBox valoresFiltro;
    private javax.swing.JCheckBoxMenuItem verBarraDibujo;
    private javax.swing.JCheckBoxMenuItem verBarraGeneral;
    private javax.swing.JCheckBoxMenuItem verBarraOperaciones;
    // End of variables declaration//GEN-END:variables
}
